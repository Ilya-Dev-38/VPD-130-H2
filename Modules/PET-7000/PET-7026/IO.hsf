BEGIN_FUNCTION_BLOCK();

char  v_di = 0;
char  v_do = 0;
WORD  v_ao[2];
WORD  v_ai[6];
int   gWriteCount = 0;

// Write DO
if (VAR_VALUE($ENABLE_DO) && VAR_VALUE($W_ACTION)) 
{
   int iWrite = 0;
   v_do   = 0;

   iWrite += VAR_GET_WRITE_BYTE(&v_do, $DO0, 0);
   iWrite += VAR_GET_WRITE_BYTE(&v_do, $DO1, 1);
    
   if ( iWrite )  // Write only when need
   {
      gWriteCount++;
      if ( ! MTM_WRITEDO($DEVICE, $NETID, 0, 2, &v_do, $TIMEOUT) )
          return HMI_ERROR;
   }  
}

// Write AO
if (VAR_VALUE($ENABLE_AO) && VAR_VALUE($W_ACTION)) 
{
   int iWrite = 0;
    
   if( VAR_FLAG_IS_WRITE($AO0) ) iWrite++; 
   v_ao[0] = VAR_VALUE($AO0);  
     
   if( VAR_FLAG_IS_WRITE($AO1) ) iWrite++; 
   v_ao[1] = VAR_VALUE($AO1);

   if ( iWrite ) // Write only when need
   {   
      gWriteCount++;
      if ( ! MTM_WRITEAO($DEVICE, $NETID, 0, 2, v_ao, $TIMEOUT) )
         return HMI_ERROR;
   }
}

if ( gWriteCount ) return HMI_OK;  // Skip reading to reduce the device loading 

// Readback DO ***************
if (VAR_VALUE($ENABLE_DO) && VAR_VALUE($R_ACTION)) { 
   if (MTM_READDO($DEVICE, $NETID, 0, 2, &v_do, $TIMEOUT) ) 
   {
      VAR_SET($DO0, (v_do>>0) & 1);
	   VAR_SET($DO1, (v_do>>1) & 1);
   } else
      return HMI_ERROR;
}

// Readback AO ***************	
if (VAR_VALUE($ENABLE_AO) && VAR_VALUE($R_ACTION)) { 
   if (MTM_READAO($DEVICE, $NETID, 0, 2, v_ao, $TIMEOUT) ) 
   {
      VAR_SET($AO0, v_ao[0]);
      VAR_SET($AO1, v_ao[1]);
   } else
      return HMI_ERROR;
}

// Read DI ********************
if (VAR_VALUE($ENABLE_DI) && VAR_VALUE($R_ACTION)) { 
   if (MTM_READDI($DEVICE, $NETID, 0, 2, &v_di, $TIMEOUT)) 
   {  
      VAR_SET($DI0, (v_di>>0) & 1);
      VAR_SET($DI1, (v_di>>1) & 1);
   } else
      return HMI_ERROR;
}

// Read AI ********************
if (VAR_VALUE($ENABLE_AI) && VAR_VALUE($R_ACTION)) { 
   if (MTM_READAI($DEVICE, $NETID, 0, 6, v_ai, $TIMEOUT) ) 
   {
      VAR_SET($AI0, v_ai[0]);
      VAR_SET($AI1, v_ai[1]);
      VAR_SET($AI2, v_ai[2]);
      VAR_SET($AI3, v_ai[3]);
      VAR_SET($AI4, v_ai[4]);
      VAR_SET($AI5, v_ai[5]);
   } else
      return HMI_ERROR;
}

END_FUNCTION_BLOCK();
