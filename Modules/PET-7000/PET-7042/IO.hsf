BEGIN_FUNCTION_BLOCK();

char  v_do[2] = {0}; // 16-ch
int   gWriteCount = 0;

// Write DO
if (VAR_VALUE($ENABLE_DO) &&VAR_VALUE($W_ACTION)) 
{
   int iWrite = 0;

   iWrite += VAR_GET_WRITE_BYTE(&v_do[0], $DO0, 0);
   iWrite += VAR_GET_WRITE_BYTE(&v_do[0], $DO1, 1);
   iWrite += VAR_GET_WRITE_BYTE(&v_do[0], $DO2, 2);
   iWrite += VAR_GET_WRITE_BYTE(&v_do[0], $DO3, 3);
   iWrite += VAR_GET_WRITE_BYTE(&v_do[0], $DO4, 4);
   iWrite += VAR_GET_WRITE_BYTE(&v_do[0], $DO5, 5);
   iWrite += VAR_GET_WRITE_BYTE(&v_do[0], $DO6, 6);
   iWrite += VAR_GET_WRITE_BYTE(&v_do[0], $DO7, 7);
    
   iWrite += VAR_GET_WRITE_BYTE(&v_do[1], $DO8,  0);
   iWrite += VAR_GET_WRITE_BYTE(&v_do[1], $DO9,  1);
   iWrite += VAR_GET_WRITE_BYTE(&v_do[1], $DO10, 2);
   iWrite += VAR_GET_WRITE_BYTE(&v_do[1], $DO11, 3);
   iWrite += VAR_GET_WRITE_BYTE(&v_do[1], $DO12, 4);
   iWrite += VAR_GET_WRITE_BYTE(&v_do[1], $DO13, 5);
   iWrite += VAR_GET_WRITE_BYTE(&v_do[1], $DO14, 6);
   iWrite += VAR_GET_WRITE_BYTE(&v_do[1], $DO15, 7);

   if ( iWrite )  // Write only when need
   {
      gWriteCount++;
      if ( ! MTM_WRITEDO($DEVICE, $NETID, 0, 16, v_do, $TIMEOUT) )
         return HMI_ERROR;
   }  
}

if ( gWriteCount ) return HMI_OK;  // Skip reading to reduce the device loading 

if (VAR_VALUE($ENABLE_DO) && VAR_VALUE($R_ACTION)) { 
	if (MTM_READDO($DEVICE, $NETID, 0, 16, v_do, $TIMEOUT) ) 
	{
		VAR_SET($DO0,  (v_do[0] >>0) & 1);
		VAR_SET($DO1,  (v_do[0] >>1) & 1);
		VAR_SET($DO2,  (v_do[0] >>2) & 1);
		VAR_SET($DO3,  (v_do[0] >>3) & 1);
		VAR_SET($DO4,  (v_do[0] >>4) & 1);
		VAR_SET($DO5,  (v_do[0] >>5) & 1);
		VAR_SET($DO6,  (v_do[0] >>6) & 1);
		VAR_SET($DO7,  (v_do[0] >>7) & 1);
		
		VAR_SET($DO8,  (v_do[1] >>0) & 1);
		VAR_SET($DO9,  (v_do[1] >>1) & 1);
		VAR_SET($DO10, (v_do[1] >>2) & 1);
		VAR_SET($DO11, (v_do[1] >>3) & 1);
		VAR_SET($DO12, (v_do[1] >>4) & 1);
		VAR_SET($DO13, (v_do[1] >>5) & 1);
		VAR_SET($DO14, (v_do[1] >>6) & 1);
		VAR_SET($DO15, (v_do[1] >>7) & 1);
	} else
	   return HMI_ERROR;
}

END_FUNCTION_BLOCK();
