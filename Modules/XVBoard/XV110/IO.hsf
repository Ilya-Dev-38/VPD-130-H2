BEGIN_FUNCTION_BLOCK();

char  data[2];  // for 16-bit DI
BOOL  flag ;

uart_SetTimeout($CONNECTION, $TIMEOUT);


if(VAR_VALUE($ENABLE_DI) && VAR_VALUE($R_ACTION))
{
   data[0] = data[1] = 0;
   
   // Modbus RTU master API uses byte-array to send/receive data.
   flag = mrm_ReadDI($CONNECTION, $NETID, 0, 16, data);
   if (! flag) return HMI_ERROR; // failure

   VAR_SET($DI0, (data[0]>>0) & 1);
   VAR_SET($DI1, (data[0]>>1) & 1);
   VAR_SET($DI2, (data[0]>>2) & 1);
   VAR_SET($DI3, (data[0]>>3) & 1);
   VAR_SET($DI4, (data[0]>>4) & 1);
   VAR_SET($DI5, (data[0]>>5) & 1);
   VAR_SET($DI6, (data[0]>>6) & 1);
   VAR_SET($DI7, (data[0]>>7) & 1);
   
   VAR_SET($DI8,  (data[1]>>0) & 1);
   VAR_SET($DI9,  (data[1]>>1) & 1);
   VAR_SET($DI10, (data[1]>>2) & 1);
   VAR_SET($DI11, (data[1]>>3) & 1);
   VAR_SET($DI12, (data[1]>>4) & 1);
   VAR_SET($DI13, (data[1]>>5) & 1);
   VAR_SET($DI14, (data[1]>>6) & 1);
   VAR_SET($DI15, (data[1]>>7) & 1);
}

END_FUNCTION_BLOCK();
