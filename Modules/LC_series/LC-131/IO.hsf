BEGIN_FUNCTION_BLOCK();

char  v_do, v_di_short,v_di;
BOOL  flag ;
int   gWriteCount = 0;
WORD  recv[3];    // Raw data from M-7000

uart_SetTimeout($CONNECTION, $TIMEOUT);

if(VAR_VALUE($ENABLE_DO) && VAR_VALUE($W_ACTION))
{			
   int iWrite = 0;
   v_do   = 0;

   iWrite += VAR_GET_WRITE_BYTE(&v_do, $DO0, 0);

   if ( iWrite )  // Write only when need
   {
      // Modbus RTU master API uses byte-array to send/receive data.
      flag = mrm_WriteDO($CONNECTION, $NETID, 0, 1, &v_do);
      if (! flag) return HMI_ERROR; // failure
	  
      gWriteCount++;
   }
}

// Skip the reading (one time) if there is writing,
// this reduces the loading of the remote I/O device.
if ( gWriteCount ) return HMI_OK;


if(VAR_VALUE($ENABLE_DI) && VAR_VALUE($R_ACTION))
{
   v_di = 0;

   // Modbus RTU master API uses byte-array to send/receive data.
   flag = mrm_ReadDI($CONNECTION, $NETID, 32, 3, &v_di);
   if (! flag) return HMI_ERROR; // failure

   VAR_SET($DI0, (v_di>>0) & 1);
   VAR_SET($DI1, (v_di>>1) & 1);
   VAR_SET($DI2, (v_di>>2) & 1);
}

if(VAR_VALUE($ENABLE_DI) && VAR_VALUE($R_ACTION))
{
   v_di_short = 0;

   // Modbus RTU master API uses byte-array to send/receive data.
   flag = mrm_ReadDI($CONNECTION, $NETID, 224, 3, &v_di_short);
   if (! flag) return HMI_ERROR; // failure

   VAR_SET($DI3, (v_di_short>>0) & 1);
   VAR_SET($DI4, (v_di_short>>1) & 1);
   VAR_SET($DI5, (v_di_short>>2) & 1);
}

if(VAR_VALUE($ENABLE_DO) && VAR_VALUE($R_ACTION))
{
   v_do = 0;

   // Modbus RTU master API uses byte-array to send/receive data.
   flag = mrm_ReadDO($CONNECTION, $NETID, 0, 1, &v_do);
   if (! flag) return HMI_ERROR; // failure

   VAR_SET($DO0, (v_do>>0) & 1);
}


if ( VAR_VALUE($ENABLE_AI) && VAR_VALUE($R_ACTION) ) { 

  memset(recv, 0, sizeof(recv));
  flag = mrm_ReadAI($CONNECTION, $NetID, 0, 3, recv);
  if (! flag) return HMI_ERROR; // failure


  VAR_SET($AI0, recv[0] );
  VAR_SET($AI1, recv[1] );
  VAR_SET($AI2, recv[2] );
 
}

END_FUNCTION_BLOCK();
