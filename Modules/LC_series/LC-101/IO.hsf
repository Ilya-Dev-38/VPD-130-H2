BEGIN_FUNCTION_BLOCK();

char  data,v_di ;  // for 16-bit DO
BOOL  flag ;
int   gWriteCount = 0;

uart_SetTimeout($CONNECTION, $TIMEOUT);

if(VAR_VALUE($ENABLE_DO) && VAR_VALUE($W_ACTION))
{			
   int iWrite = 0;
   data = 0;

   iWrite += VAR_GET_WRITE_BYTE( &data, $DO0, 0);

   if ( iWrite )  // Write only when need
   {
      // Modbus RTU master API uses byte-array to send/receive data.
      flag = mrm_WriteDO($CONNECTION, $NETID, 0, 1, &data);
      if (! flag) return HMI_ERROR; // failure
	  
      gWriteCount++;
   }
}

// Skip the reading (one time) if there is writing,
// this reduces the loading of the remote I/O device.
if ( gWriteCount ) return HMI_OK;

if(VAR_VALUE($ENABLE_DI) && VAR_VALUE($R_ACTION))
{
   v_di = 0;

   // Modbus RTU master API uses byte-array to send/receive data.
   flag = mrm_ReadDI($CONNECTION, $NETID, 32, 1, &v_di);
   if (! flag) return HMI_ERROR; // failure

   VAR_SET($DI0, (v_di>>0) & 1);
}

if(VAR_VALUE($ENABLE_DO) && VAR_VALUE($R_ACTION))
{
   data = 0;
   
   // Modbus RTU master API uses byte-array to send/receive data.
   flag = mrm_ReadDO($CONNECTION, $NETID, 0, 1, &data);
   if (! flag) return HMI_ERROR; // failure

   VAR_SET($DO0, (data >> 0) & 1);
}

END_FUNCTION_BLOCK();
