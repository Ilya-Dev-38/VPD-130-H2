BEGIN_FUNCTION_BLOCK();

char  v_do[4];
int   gWriteCount = 0;
const PVAR var_list[]={
   &$DO0,  &$DO1,  &$DO2,  &$DO3,  &$DO4,  &$DO5,  &$DO6,  &$DO7, 
   &$DO8,  &$DO9,  &$DO10, &$DO11, &$DO12, &$DO13, &$DO14, &$DO15,
   &$DO16, &$DO17, &$DO18, &$DO19, &$DO20, &$DO21, &$DO22, &$DO23,
   &$DO24, &$DO25, &$DO26, &$DO27, &$DO28, &$DO29, &$DO30, &$DO31 };

// Write DO
if (VAR_VALUE($ENABLE_DO) && VAR_VALUE($W_ACTION)) 
{
   int iWrite = 0;
   memset(v_do, 0, 4);

   int iTag = 0;
   for (int iByte=0; iByte<=3; iByte++)
	{
		for (int iBit=0; iBit<=7; iBit++)
		{
			iWrite += PVAR_GET_WRITE_BYTE( &(v_do[iByte]), var_list[iTag], iBit);
			iTag++;
		}
	}

   if ( iWrite )  // Write only when need
   {
      gWriteCount++;
      if ( ! MTM_WRITEDO($DEVICE, $NETID, 0, 32, v_do, $TIMEOUT) )
          return HMI_ERROR;
   }  
}

if ( gWriteCount ) return HMI_OK;  // Skip reading to reduce the device loading 

// Readback DO ***************
if (VAR_VALUE($ENABLE_DO) && VAR_VALUE($R_ACTION)) { 
   if (MTM_READDO($DEVICE, $NETID, 0, 32, v_do, $TIMEOUT) ) 
   {
		int iTag = 0;
		for (int iByte=0; iByte<=3; iByte++)
		{
			for (int iBit=0; iBit<=7; iBit++)
			{
				PVAR_SET(var_list[iTag], (v_do[iByte]>> iBit) & 1);
				iTag++;
			}
		}

   } else
      return HMI_ERROR;
}

END_FUNCTION_BLOCK();
