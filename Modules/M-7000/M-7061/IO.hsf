BEGIN_FUNCTION_BLOCK();

char  data[2];  // for 16-bit DO
BOOL  flag ;
int   gWriteCount = 0;

uart_SetTimeout($CONNECTION, $TIMEOUT);

if(VAR_VALUE($ENABLE_DO) && VAR_VALUE($W_ACTION))
{			
   int iWrite = 0;
   data[0] = data[1] = 0;

   iWrite += VAR_GET_WRITE_BYTE( &(data[0]), $DO0, 0);
   iWrite += VAR_GET_WRITE_BYTE( &(data[0]), $DO1, 1);
   iWrite += VAR_GET_WRITE_BYTE( &(data[0]), $DO2, 2);
   iWrite += VAR_GET_WRITE_BYTE( &(data[0]), $DO3, 3);
   iWrite += VAR_GET_WRITE_BYTE( &(data[0]), $DO4, 4);
   iWrite += VAR_GET_WRITE_BYTE( &(data[0]), $DO5, 5);
   iWrite += VAR_GET_WRITE_BYTE( &(data[0]), $DO6, 6);
   iWrite += VAR_GET_WRITE_BYTE( &(data[0]), $DO7, 7);
    
   iWrite += VAR_GET_WRITE_BYTE( &(data[1]), $DO8,  0);
   iWrite += VAR_GET_WRITE_BYTE( &(data[1]), $DO9,  1);
   iWrite += VAR_GET_WRITE_BYTE( &(data[1]), $DO10, 2);
   iWrite += VAR_GET_WRITE_BYTE( &(data[1]), $DO11, 3);

   if ( iWrite )  // Write only when need
   {
      // Modbus RTU master API uses byte-array to send/receive data.
      flag = mrm_WriteDO($CONNECTION, $NETID, 0, 12, data);
      if (! flag) return HMI_ERROR; // failure
	  
      gWriteCount++;
   }
}

// Skip the reading (one time) if there is writing,
// this reduces the loading of the remote I/O device.
if ( gWriteCount ) return HMI_OK;

if(VAR_VALUE($ENABLE_DO) && VAR_VALUE($R_ACTION))
{
   data[0] = data[1] = 0;
   
   // Modbus RTU master API uses byte-array to send/receive data.
   flag = mrm_ReadDO($CONNECTION, $NETID, 0, 12, data);
   if (! flag) return HMI_ERROR; // failure

   VAR_SET($DO0, (data[0]>>0) & 1);
   VAR_SET($DO1, (data[0]>>1) & 1);
   VAR_SET($DO2, (data[0]>>2) & 1);
   VAR_SET($DO3, (data[0]>>3) & 1);
   VAR_SET($DO4, (data[0]>>4) & 1);
   VAR_SET($DO5, (data[0]>>5) & 1);
   VAR_SET($DO6, (data[0]>>6) & 1);
   VAR_SET($DO7, (data[0]>>7) & 1);
   
   VAR_SET($DO8,  (data[1]>>0) & 1);
   VAR_SET($DO9,  (data[1]>>1) & 1);
   VAR_SET($DO10, (data[1]>>2) & 1);
   VAR_SET($DO11, (data[1]>>3) & 1);
}

END_FUNCTION_BLOCK();
