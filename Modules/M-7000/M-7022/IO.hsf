BEGIN_FUNCTION_BLOCK();

const int ch_count = 2;  // Number of AO channels
BOOL  flag;
WORD  recv[ch_count];    // Raw data from M-7000
int   val[ch_count], i;
int   gWriteCount = 0;
const WORD aoTypes[]={$TYPE_AO0, $TYPE_AO1 };
const int aoGains[]={ $GAIN_AO0, $GAIN_AO1};

//DWORD dwStart, dwEnd;
//dwStart = hmi_GetTickCount();

uart_SetTimeout($CONNECTION, $TIMEOUT);

if ( VAR_VALUE($ENABLE_AO) && VAR_VALUE($W_ACTION) ) 
{ 
   int iWrite = 0;

   if( VAR_FLAG_IS_WRITE($AO0) ) iWrite++;
   recv[0] = M7000_AOLongToHex( "7022", aoTypes[0], VAR_VALUE($AO0), aoGains[0], NULL );

   if( VAR_FLAG_IS_WRITE($AO1) ) iWrite++;
   recv[1] = M7000_AOLongToHex( "7022", aoTypes[1], VAR_VALUE($AO1), aoGains[1], NULL );

   if ( iWrite )
   {
      gWriteCount++;
      flag = mrm_WriteAO($CONNECTION, $NetID, 0, ch_count, recv);
      if (! flag) return HMI_ERROR; // failure
   }
}

// Skip the reading (one time) if there is writing,
// this reduces the loading of the remote I/O device.
if ( gWriteCount ) return HMI_OK;

if ( VAR_VALUE($ENABLE_AO) && VAR_VALUE($R_ACTION) ) 
{ 
  memset(recv, 0, sizeof(recv));
  flag = mrm_ReadAO($CONNECTION, $NetID, 0, ch_count, recv);
  if (! flag) return HMI_ERROR; // failure

  for (i=0; i<ch_count; i++)
     val[i] = M7000_AOHexToLong("7022", aoTypes[i], recv[i], aoGains[i], NULL);

  VAR_SET($AO0, val[0] );
  VAR_SET($AO1, val[1] );
}

//dwEnd = hmi_GetTickCount() - dwStart;
//VAR_SET(v1, dwEnd);

END_FUNCTION_BLOCK();
