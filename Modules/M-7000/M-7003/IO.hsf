BEGIN_FUNCTION_BLOCK();

char  v_do, v_di;
BOOL  flag ;
int   gWriteCount = 0;
const int ch_count = 8;  // Number of AI channels
WORD  recv[ch_count];    // Raw data from M-7000
int   val[ch_count], i;
const WORD aiTypes[]={$TYPE_AI0, $TYPE_AI1, $TYPE_AI2, $TYPE_AI3, $TYPE_AI4, $TYPE_AI5, $TYPE_AI6, $TYPE_AI7};
const int aiGains[]={ $GAIN_AI0, $GAIN_AI1, $GAIN_AI2, $GAIN_AI3, $GAIN_AI4, $GAIN_AI5, $GAIN_AI6, $GAIN_AI7};

uart_SetTimeout($CONNECTION, $TIMEOUT);

if(VAR_VALUE($ENABLE_DO) && VAR_VALUE($W_ACTION))
{			
   int iWrite = 0;
   v_do   = 0;

   iWrite += VAR_GET_WRITE_BYTE(&v_do, $DO0, 0);
   iWrite += VAR_GET_WRITE_BYTE(&v_do, $DO1, 1);
   iWrite += VAR_GET_WRITE_BYTE(&v_do, $DO2, 2);
   iWrite += VAR_GET_WRITE_BYTE(&v_do, $DO3, 3);

   if ( iWrite )  // Write only when need
   {
      // Modbus RTU master API uses byte-array to send/receive data.
      flag = mrm_WriteDO($CONNECTION, $NETID, 0, 4, &v_do);
      if (! flag) return HMI_ERROR; // failure
	  
      gWriteCount++;
   }
}

// Skip the reading (one time) if there is writing,
// this reduces the loading of the remote I/O device.
if ( gWriteCount ) return HMI_OK;

if ( VAR_VALUE($ENABLE_AI) && VAR_VALUE($R_ACTION) ) { 

  memset(recv, 0, sizeof(recv));
  flag = mrm_ReadAI($CONNECTION, $NetID, 0, ch_count, recv);
  if (! flag) return HMI_ERROR; // failure

  for (i=0; i<ch_count; i++)
     val[i] = M7000_AIHexToLong("7003", aiTypes[i], recv[i], aiGains[i], NULL);

  VAR_SET($AI0, val[0] );
  VAR_SET($AI1, val[1] );
  VAR_SET($AI2, val[2] );
  VAR_SET($AI3, val[3] );
  VAR_SET($AI4, val[4] );
  VAR_SET($AI5, val[5] );
  VAR_SET($AI6, val[6] );
  VAR_SET($AI7, val[7] );
}

if(VAR_VALUE($ENABLE_DO) && VAR_VALUE($R_ACTION))
{
   v_do = 0;

   // Modbus RTU master API uses byte-array to send/receive data.
   flag = mrm_ReadDO($CONNECTION, $NETID, 0, 4, &v_do);
   if (! flag) return HMI_ERROR; // failure

   VAR_SET($DO0, (v_do>>0) & 1);
   VAR_SET($DO1, (v_do>>1) & 1);
   VAR_SET($DO2, (v_do>>2) & 1);
   VAR_SET($DO3, (v_do>>3) & 1);
}

END_FUNCTION_BLOCK();
