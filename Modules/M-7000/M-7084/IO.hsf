BEGIN_FUNCTION_BLOCK();

char  v_clr;
BOOL  flag ;
int   gWriteCount = 0;
WORD  DI_Counter_Recv[16];   

uart_SetTimeout($CONNECTION, $TIMEOUT);

if(VAR_VALUE($ENABLE_DO) && VAR_VALUE($W_ACTION))
{			
   int iWrite = 0;
   v_clr   = 0;

   iWrite += VAR_GET_WRITE_BYTE(&v_clr, $CNTCL0, 0);
   iWrite += VAR_GET_WRITE_BYTE(&v_clr, $CNTCL1, 1);
   iWrite += VAR_GET_WRITE_BYTE(&v_clr, $CNTCL2, 2);
   iWrite += VAR_GET_WRITE_BYTE(&v_clr, $CNTCL3, 3);
   iWrite += VAR_GET_WRITE_BYTE(&v_clr, $CNTCL4, 4);
   iWrite += VAR_GET_WRITE_BYTE(&v_clr, $CNTCL5, 5);
   iWrite += VAR_GET_WRITE_BYTE(&v_clr, $CNTCL6, 6);
   iWrite += VAR_GET_WRITE_BYTE(&v_clr, $CNTCL7, 7);

   if ( iWrite )  // Write only when need
   {
      // Modbus RTU master API uses byte-array to send/receive data.
      flag = mrm_WriteDO($CONNECTION, $NETID, 0x200, 8, &v_clr);
      if (! flag) return HMI_ERROR; // failure
	  
      gWriteCount++;
   }
}

// Skip the reading (one time) if there is writing,
// this reduces the loading of the remote I/O device.
if ( gWriteCount ) return HMI_OK;


if ( VAR_VALUE($ENABLE_AI) && VAR_VALUE($R_ACTION)) 
{ 
  memset(DI_Counter_Recv, 0, sizeof(DI_Counter_Recv));
  flag = mrm_ReadAI($CONNECTION, $NetID, 0, 16, DI_Counter_Recv);
  if (! flag) return HMI_ERROR; // failure

  VAR_SET($AI0, DI_Counter_Recv[0]+(DI_Counter_Recv[1]<<16) );
  VAR_SET($AI1, DI_Counter_Recv[2]+(DI_Counter_Recv[3]<<16) );
  VAR_SET($AI2, DI_Counter_Recv[4]+(DI_Counter_Recv[5]<<16) );
  VAR_SET($AI3, DI_Counter_Recv[6]+(DI_Counter_Recv[7]<<16));
  VAR_SET($AI4, DI_Counter_Recv[8]+(DI_Counter_Recv[9]<<16) );
  VAR_SET($AI5, DI_Counter_Recv[10]+(DI_Counter_Recv[11]<<16) );
  VAR_SET($AI6, DI_Counter_Recv[12]+(DI_Counter_Recv[13]<<16) );
  VAR_SET($AI7, DI_Counter_Recv[14]+(DI_Counter_Recv[15]<<16));
}

END_FUNCTION_BLOCK();
