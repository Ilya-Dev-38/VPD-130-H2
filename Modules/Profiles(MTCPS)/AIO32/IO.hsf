BEGIN_FUNCTION_BLOCK();

DWORD st = mts_GetIOStatus($NETID);

if(VAR_VALUE($ENABLE_AIO) && VAR_VALUE($W_ACTION))
{
   // Update to gmts_AIOBuf only when the I/O Tag's write-flag is true.
   // The grms_AIOBuf is global data buffer for the Modbus RTU slave functions 
   // working in ladder mode.
   
   // AIO0 is usually used as device status.
   // When reboot, all I/O tags are initialized as zeros.
   // Client (Modbus RTU master) can then initial the TouchPAD again, 
   // and then set AIO0 to 1 that indicates initialized by client.
   
   VAR_UPDATE_AIO_BUF(&gmts_AioBuf[0],  $AIO0);
   VAR_UPDATE_AIO_BUF(&gmts_AioBuf[1],  $AIO1);
   VAR_UPDATE_AIO_BUF(&gmts_AioBuf[2],  $AIO2);
   VAR_UPDATE_AIO_BUF(&gmts_AioBuf[3],  $AIO3);
   VAR_UPDATE_AIO_BUF(&gmts_AioBuf[4],  $AIO4);
   VAR_UPDATE_AIO_BUF(&gmts_AioBuf[5],  $AIO5);
   VAR_UPDATE_AIO_BUF(&gmts_AioBuf[6],  $AIO6);
   VAR_UPDATE_AIO_BUF(&gmts_AioBuf[7],  $AIO7);

   VAR_UPDATE_AIO_BUF(&gmts_AioBuf[8],  $AIO8);
   VAR_UPDATE_AIO_BUF(&gmts_AioBuf[9],  $AIO9);
   VAR_UPDATE_AIO_BUF(&gmts_AioBuf[10], $AIO10);
   VAR_UPDATE_AIO_BUF(&gmts_AioBuf[11], $AIO11);
   VAR_UPDATE_AIO_BUF(&gmts_AioBuf[12], $AIO12);
   VAR_UPDATE_AIO_BUF(&gmts_AioBuf[13], $AIO13);
   VAR_UPDATE_AIO_BUF(&gmts_AioBuf[14], $AIO14);
   VAR_UPDATE_AIO_BUF(&gmts_AioBuf[15], $AIO15);

   VAR_UPDATE_AIO_BUF(&gmts_AioBuf[16], $AIO16);
   VAR_UPDATE_AIO_BUF(&gmts_AioBuf[17], $AIO17);
   VAR_UPDATE_AIO_BUF(&gmts_AioBuf[18], $AIO18);
   VAR_UPDATE_AIO_BUF(&gmts_AioBuf[19], $AIO19);
   VAR_UPDATE_AIO_BUF(&gmts_AioBuf[20], $AIO20);
   VAR_UPDATE_AIO_BUF(&gmts_AioBuf[21], $AIO21);
   VAR_UPDATE_AIO_BUF(&gmts_AioBuf[22], $AIO22);
   VAR_UPDATE_AIO_BUF(&gmts_AioBuf[23], $AIO23);
   
   VAR_UPDATE_AIO_BUF(&gmts_AioBuf[24], $AIO24);
   VAR_UPDATE_AIO_BUF(&gmts_AioBuf[25], $AIO25);
   VAR_UPDATE_AIO_BUF(&gmts_AioBuf[26], $AIO26);
   VAR_UPDATE_AIO_BUF(&gmts_AioBuf[27], $AIO27);
   VAR_UPDATE_AIO_BUF(&gmts_AioBuf[28], $AIO28);
   VAR_UPDATE_AIO_BUF(&gmts_AioBuf[29], $AIO29);
   VAR_UPDATE_AIO_BUF(&gmts_AioBuf[30], $AIO30);
   VAR_UPDATE_AIO_BUF(&gmts_AioBuf[31], $AIO31);
  
}

if(VAR_VALUE($ENABLE_AIO) && VAR_VALUE($R_ACTION))
{
   // Update all I/O Tags from the gmts_AioBuf.
   
   if ( st & 2 ) // bit 1 is dity flag for AIO
   {
      VAR_SET($AIO0,  gmts_AioBuf[0]);
      VAR_SET($AIO1,  gmts_AioBuf[1]);
      VAR_SET($AIO2,  gmts_AioBuf[2]);
      VAR_SET($AIO3,  gmts_AioBuf[3]);
      VAR_SET($AIO4,  gmts_AioBuf[4]);
      VAR_SET($AIO5,  gmts_AioBuf[5]);
      VAR_SET($AIO6,  gmts_AioBuf[6]);
      VAR_SET($AIO7,  gmts_AioBuf[7]);
   
      VAR_SET($AIO8,  gmts_AioBuf[8]);
      VAR_SET($AIO9,  gmts_AioBuf[9]);
      VAR_SET($AIO10, gmts_AioBuf[10]);
      VAR_SET($AIO11, gmts_AioBuf[11]);
      VAR_SET($AIO12, gmts_AioBuf[12]);
      VAR_SET($AIO13, gmts_AioBuf[13]);
      VAR_SET($AIO14, gmts_AioBuf[14]);
      VAR_SET($AIO15, gmts_AioBuf[15]);

      VAR_SET($AIO16, gmts_AioBuf[16]);
      VAR_SET($AIO17, gmts_AioBuf[17]);
      VAR_SET($AIO18, gmts_AioBuf[18]);
      VAR_SET($AIO19, gmts_AioBuf[19]);
      VAR_SET($AIO20, gmts_AioBuf[20]);
      VAR_SET($AIO21, gmts_AioBuf[21]);
      VAR_SET($AIO22, gmts_AioBuf[22]);
      VAR_SET($AIO23, gmts_AioBuf[23]);

      VAR_SET($AIO24, gmts_AioBuf[24]);
      VAR_SET($AIO25, gmts_AioBuf[25]);
      VAR_SET($AIO26, gmts_AioBuf[26]);
      VAR_SET($AIO27, gmts_AioBuf[27]);
      VAR_SET($AIO28, gmts_AioBuf[28]);
      VAR_SET($AIO29, gmts_AioBuf[29]);
      VAR_SET($AIO30, gmts_AioBuf[30]);
      VAR_SET($AIO31, gmts_AioBuf[31]);
   }   
}

END_FUNCTION_BLOCK();
