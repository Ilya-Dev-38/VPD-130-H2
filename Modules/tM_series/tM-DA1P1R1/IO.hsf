BEGIN_FUNCTION_BLOCK();

char  v_do, v_di;
const int ch_count = 1;  // Number of AO channels
BOOL  flag ;
WORD  recv[ch_count];    // Raw data from tM series
int   val[ch_count], i;
int   gWriteCount = 0;
const WORD aoTypes[]={$TYPE_AO0};
const int aoGains[]={ $GAIN_AO0};

uart_SetTimeout($CONNECTION, $TIMEOUT);

if(VAR_VALUE($ENABLE_DO) && VAR_VALUE($W_ACTION))
{			
   int iWrite = 0;
   v_do   = 0;

   iWrite += VAR_GET_WRITE_BYTE(&v_do, $DO0, 0);

   if ( iWrite )  // Write only when need
   {
      // Modbus RTU master API uses byte-array to send/receive data.
      flag = mrm_WriteDO($CONNECTION, $NETID, 0, 1, &v_do);
      if (! flag) return HMI_ERROR; // failure
	  
      gWriteCount++;
   }
}

if ( VAR_VALUE($ENABLE_AO) && VAR_VALUE($W_ACTION) ) 
{ 
   int iWrite = 0;

   if( VAR_FLAG_IS_WRITE($AO0) ) iWrite++;
   recv[0] = tM_AOLongToHex( "tM-DA1P1R1", aoTypes[0], VAR_VALUE($AO0), aoGains[0], NULL );

   if ( iWrite )
   {
      gWriteCount++;
      flag = mrm_WriteAO($CONNECTION, $NetID, 0x20, ch_count, recv);
      if (! flag) return HMI_ERROR; // failure
   }
}

// Skip the reading (one time) if there is writing,
// this reduces the loading of the remote I/O device.
if ( gWriteCount ) return HMI_OK;

if ( VAR_VALUE($ENABLE_AO) && VAR_VALUE($R_ACTION) ) 
{ 
  memset(recv, 0, sizeof(recv));
  flag = mrm_ReadAO($CONNECTION, $NetID, 0x20, ch_count, recv);
  if (! flag) return HMI_ERROR; // failure

  for (i=0; i<ch_count; i++)
     val[i] = tM_AOHexToLong("tM-DA1P1R1", aoTypes[i], recv[i], aoGains[i], NULL);

  VAR_SET($AO0, val[0] ); 
}

if(VAR_VALUE($ENABLE_DI) && VAR_VALUE($R_ACTION))
{
   v_di = 0;

   // Modbus RTU master API uses byte-array to send/receive data.
   flag = mrm_ReadDI($CONNECTION, $NETID, 0x20, 1, &v_di);
   if (! flag) return HMI_ERROR; // failure

   VAR_SET($DI0, (v_di>>0) & 1);
}

if(VAR_VALUE($ENABLE_DO) && VAR_VALUE($R_ACTION))
{
   v_do = 0;

   // Modbus RTU master API uses byte-array to send/receive data.
   flag = mrm_ReadDO($CONNECTION, $NETID, 0, 1, &v_do);
   if (! flag) return HMI_ERROR; // failure

   VAR_SET($DO0, (v_do>>0) & 1);
}

END_FUNCTION_BLOCK();
