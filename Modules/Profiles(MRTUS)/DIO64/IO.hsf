BEGIN_FUNCTION_BLOCK();

DWORD st = mrs_GetIOStatus($NETID);

if(VAR_VALUE($ENABLE_DIO) && VAR_VALUE($W_ACTION))
{
   // Update to gmrs_DioBuf only when the I/O Tag's write-flag is true.
   // The grms_DioBuf is global data buffer for the Modbus RTU slave functions 
   // working in ladder mode.
   
   // DIO0 is usually used as device status.
   // When reboot, all I/O tags are initialized as zeros.
   // Client (Modbus RTU master) can then initial the TouchPAD again, 
   // and then set DIO0 to 1 that indicates initialized by client.
   
   VAR_UPDATE_DIO_BUF_BYTE(&gmrs_DioBuf[0], $DIO0, 0);
   VAR_UPDATE_DIO_BUF_BYTE(&gmrs_DioBuf[0], $DIO1, 1);
   VAR_UPDATE_DIO_BUF_BYTE(&gmrs_DioBuf[0], $DIO2, 2);
   VAR_UPDATE_DIO_BUF_BYTE(&gmrs_DioBuf[0], $DIO3, 3);
   VAR_UPDATE_DIO_BUF_BYTE(&gmrs_DioBuf[0], $DIO4, 4);
   VAR_UPDATE_DIO_BUF_BYTE(&gmrs_DioBuf[0], $DIO5, 5);
   VAR_UPDATE_DIO_BUF_BYTE(&gmrs_DioBuf[0], $DIO6, 6);
   VAR_UPDATE_DIO_BUF_BYTE(&gmrs_DioBuf[0], $DIO7, 7);

   VAR_UPDATE_DIO_BUF_BYTE(&gmrs_DioBuf[1], $DIO8,  0);
   VAR_UPDATE_DIO_BUF_BYTE(&gmrs_DioBuf[1], $DIO9,  1);
   VAR_UPDATE_DIO_BUF_BYTE(&gmrs_DioBuf[1], $DIO10, 2);
   VAR_UPDATE_DIO_BUF_BYTE(&gmrs_DioBuf[1], $DIO11, 3);
   VAR_UPDATE_DIO_BUF_BYTE(&gmrs_DioBuf[1], $DIO12, 4);
   VAR_UPDATE_DIO_BUF_BYTE(&gmrs_DioBuf[1], $DIO13, 5);
   VAR_UPDATE_DIO_BUF_BYTE(&gmrs_DioBuf[1], $DIO14, 6);
   VAR_UPDATE_DIO_BUF_BYTE(&gmrs_DioBuf[1], $DIO15, 7);

   VAR_UPDATE_DIO_BUF_BYTE(&gmrs_DioBuf[2], $DIO16, 0);
   VAR_UPDATE_DIO_BUF_BYTE(&gmrs_DioBuf[2], $DIO17, 1);
   VAR_UPDATE_DIO_BUF_BYTE(&gmrs_DioBuf[2], $DIO18, 2);
   VAR_UPDATE_DIO_BUF_BYTE(&gmrs_DioBuf[2], $DIO19, 3);
   VAR_UPDATE_DIO_BUF_BYTE(&gmrs_DioBuf[2], $DIO20, 4);
   VAR_UPDATE_DIO_BUF_BYTE(&gmrs_DioBuf[2], $DIO21, 5);
   VAR_UPDATE_DIO_BUF_BYTE(&gmrs_DioBuf[2], $DIO22, 6);
   VAR_UPDATE_DIO_BUF_BYTE(&gmrs_DioBuf[2], $DIO23, 7);
   
   VAR_UPDATE_DIO_BUF_BYTE(&gmrs_DioBuf[3], $DIO24, 0);
   VAR_UPDATE_DIO_BUF_BYTE(&gmrs_DioBuf[3], $DIO25, 1);
   VAR_UPDATE_DIO_BUF_BYTE(&gmrs_DioBuf[3], $DIO26, 2);
   VAR_UPDATE_DIO_BUF_BYTE(&gmrs_DioBuf[3], $DIO27, 3);
   VAR_UPDATE_DIO_BUF_BYTE(&gmrs_DioBuf[3], $DIO28, 4);
   VAR_UPDATE_DIO_BUF_BYTE(&gmrs_DioBuf[3], $DIO29, 5);
   VAR_UPDATE_DIO_BUF_BYTE(&gmrs_DioBuf[3], $DIO30, 6);
   VAR_UPDATE_DIO_BUF_BYTE(&gmrs_DioBuf[3], $DIO31, 7);
  
   VAR_UPDATE_DIO_BUF_BYTE(&gmrs_DioBuf[4], $DIO32, 0);
   VAR_UPDATE_DIO_BUF_BYTE(&gmrs_DioBuf[4], $DIO33, 1);
   VAR_UPDATE_DIO_BUF_BYTE(&gmrs_DioBuf[4], $DIO34, 2);
   VAR_UPDATE_DIO_BUF_BYTE(&gmrs_DioBuf[4], $DIO35, 3);
   VAR_UPDATE_DIO_BUF_BYTE(&gmrs_DioBuf[4], $DIO36, 4);
   VAR_UPDATE_DIO_BUF_BYTE(&gmrs_DioBuf[4], $DIO37, 5);
   VAR_UPDATE_DIO_BUF_BYTE(&gmrs_DioBuf[4], $DIO38, 6);
   VAR_UPDATE_DIO_BUF_BYTE(&gmrs_DioBuf[4], $DIO39, 7);
  
   VAR_UPDATE_DIO_BUF_BYTE(&gmrs_DioBuf[5], $DIO40, 0);
   VAR_UPDATE_DIO_BUF_BYTE(&gmrs_DioBuf[5], $DIO41, 1);
   VAR_UPDATE_DIO_BUF_BYTE(&gmrs_DioBuf[5], $DIO42, 2);
   VAR_UPDATE_DIO_BUF_BYTE(&gmrs_DioBuf[5], $DIO43, 3);
   VAR_UPDATE_DIO_BUF_BYTE(&gmrs_DioBuf[5], $DIO44, 4);
   VAR_UPDATE_DIO_BUF_BYTE(&gmrs_DioBuf[5], $DIO45, 5);
   VAR_UPDATE_DIO_BUF_BYTE(&gmrs_DioBuf[5], $DIO46, 6);
   VAR_UPDATE_DIO_BUF_BYTE(&gmrs_DioBuf[5], $DIO47, 7);
  
   VAR_UPDATE_DIO_BUF_BYTE(&gmrs_DioBuf[6], $DIO48, 0);
   VAR_UPDATE_DIO_BUF_BYTE(&gmrs_DioBuf[6], $DIO49, 1);
   VAR_UPDATE_DIO_BUF_BYTE(&gmrs_DioBuf[6], $DIO50, 2);
   VAR_UPDATE_DIO_BUF_BYTE(&gmrs_DioBuf[6], $DIO51, 3);
   VAR_UPDATE_DIO_BUF_BYTE(&gmrs_DioBuf[6], $DIO52, 4);
   VAR_UPDATE_DIO_BUF_BYTE(&gmrs_DioBuf[6], $DIO53, 5);
   VAR_UPDATE_DIO_BUF_BYTE(&gmrs_DioBuf[6], $DIO54, 6);
   VAR_UPDATE_DIO_BUF_BYTE(&gmrs_DioBuf[6], $DIO55, 7);
  
   VAR_UPDATE_DIO_BUF_BYTE(&gmrs_DioBuf[7], $DIO56, 0);
   VAR_UPDATE_DIO_BUF_BYTE(&gmrs_DioBuf[7], $DIO57, 1);
   VAR_UPDATE_DIO_BUF_BYTE(&gmrs_DioBuf[7], $DIO58, 2);
   VAR_UPDATE_DIO_BUF_BYTE(&gmrs_DioBuf[7], $DIO59, 3);
   VAR_UPDATE_DIO_BUF_BYTE(&gmrs_DioBuf[7], $DIO60, 4);
   VAR_UPDATE_DIO_BUF_BYTE(&gmrs_DioBuf[7], $DIO61, 5);
   VAR_UPDATE_DIO_BUF_BYTE(&gmrs_DioBuf[7], $DIO62, 6);
   VAR_UPDATE_DIO_BUF_BYTE(&gmrs_DioBuf[7], $DIO63, 7);
}

if(VAR_VALUE($ENABLE_DIO) && VAR_VALUE($R_ACTION))
{
   // Update all I/O Tags from the gmrs_DioBuf.
    
   if ( st & 1 ) // bit 0 is dity flag for DIO
   {
      VAR_SET($DIO0,  (gmrs_DioBuf[0]>>0) & 1);
      VAR_SET($DIO1,  (gmrs_DioBuf[0]>>1) & 1);
      VAR_SET($DIO2,  (gmrs_DioBuf[0]>>2) & 1);
      VAR_SET($DIO3,  (gmrs_DioBuf[0]>>3) & 1);
      VAR_SET($DIO4,  (gmrs_DioBuf[0]>>4) & 1);
      VAR_SET($DIO5,  (gmrs_DioBuf[0]>>5) & 1);
      VAR_SET($DIO6,  (gmrs_DioBuf[0]>>6) & 1);
      VAR_SET($DIO7,  (gmrs_DioBuf[0]>>7) & 1);
   
      VAR_SET($DIO8,  (gmrs_DioBuf[1]>>0) & 1);
      VAR_SET($DIO9,  (gmrs_DioBuf[1]>>1) & 1);
      VAR_SET($DIO10, (gmrs_DioBuf[1]>>2) & 1);
      VAR_SET($DIO11, (gmrs_DioBuf[1]>>3) & 1);
      VAR_SET($DIO12, (gmrs_DioBuf[1]>>4) & 1);
      VAR_SET($DIO13, (gmrs_DioBuf[1]>>5) & 1);
      VAR_SET($DIO14, (gmrs_DioBuf[1]>>6) & 1);
      VAR_SET($DIO15, (gmrs_DioBuf[1]>>7) & 1);

      VAR_SET($DIO16, (gmrs_DioBuf[2]>>0) & 1);
      VAR_SET($DIO17, (gmrs_DioBuf[2]>>1) & 1);
      VAR_SET($DIO18, (gmrs_DioBuf[2]>>2) & 1);
      VAR_SET($DIO19, (gmrs_DioBuf[2]>>3) & 1);
      VAR_SET($DIO20, (gmrs_DioBuf[2]>>4) & 1);
      VAR_SET($DIO21, (gmrs_DioBuf[2]>>5) & 1);
      VAR_SET($DIO22, (gmrs_DioBuf[2]>>6) & 1);
      VAR_SET($DIO23, (gmrs_DioBuf[2]>>7) & 1);

      VAR_SET($DIO24, (gmrs_DioBuf[3]>>0) & 1);
      VAR_SET($DIO25, (gmrs_DioBuf[3]>>1) & 1);
      VAR_SET($DIO26, (gmrs_DioBuf[3]>>2) & 1);
      VAR_SET($DIO27, (gmrs_DioBuf[3]>>3) & 1);
      VAR_SET($DIO28, (gmrs_DioBuf[3]>>4) & 1);
      VAR_SET($DIO29, (gmrs_DioBuf[3]>>5) & 1);
      VAR_SET($DIO30, (gmrs_DioBuf[3]>>6) & 1);
      VAR_SET($DIO31, (gmrs_DioBuf[3]>>7) & 1);
   
      VAR_SET($DIO32, (gmrs_DioBuf[4]>>0) & 1);
      VAR_SET($DIO33, (gmrs_DioBuf[4]>>1) & 1);
      VAR_SET($DIO34, (gmrs_DioBuf[4]>>2) & 1);
      VAR_SET($DIO35, (gmrs_DioBuf[4]>>3) & 1);
      VAR_SET($DIO36, (gmrs_DioBuf[4]>>4) & 1);
      VAR_SET($DIO37, (gmrs_DioBuf[4]>>5) & 1);
      VAR_SET($DIO38, (gmrs_DioBuf[4]>>6) & 1);
      VAR_SET($DIO39, (gmrs_DioBuf[4]>>7) & 1);

      VAR_SET($DIO40, (gmrs_DioBuf[5]>>0) & 1);
      VAR_SET($DIO41, (gmrs_DioBuf[5]>>1) & 1);
      VAR_SET($DIO42, (gmrs_DioBuf[5]>>2) & 1);
      VAR_SET($DIO43, (gmrs_DioBuf[5]>>3) & 1);
      VAR_SET($DIO44, (gmrs_DioBuf[5]>>4) & 1);
      VAR_SET($DIO45, (gmrs_DioBuf[5]>>5) & 1);
      VAR_SET($DIO46, (gmrs_DioBuf[5]>>6) & 1);
      VAR_SET($DIO47, (gmrs_DioBuf[5]>>7) & 1);

      VAR_SET($DIO48, (gmrs_DioBuf[6]>>0) & 1);
      VAR_SET($DIO49, (gmrs_DioBuf[6]>>1) & 1);
      VAR_SET($DIO50, (gmrs_DioBuf[6]>>2) & 1);
      VAR_SET($DIO51, (gmrs_DioBuf[6]>>3) & 1);
      VAR_SET($DIO52, (gmrs_DioBuf[6]>>4) & 1);
      VAR_SET($DIO53, (gmrs_DioBuf[6]>>5) & 1);
      VAR_SET($DIO54, (gmrs_DioBuf[6]>>6) & 1);
      VAR_SET($DIO55, (gmrs_DioBuf[6]>>7) & 1);

      VAR_SET($DIO56, (gmrs_DioBuf[7]>>0) & 1);
      VAR_SET($DIO57, (gmrs_DioBuf[7]>>1) & 1);
      VAR_SET($DIO58, (gmrs_DioBuf[7]>>2) & 1);
      VAR_SET($DIO59, (gmrs_DioBuf[7]>>3) & 1);
      VAR_SET($DIO60, (gmrs_DioBuf[7]>>4) & 1);
      VAR_SET($DIO61, (gmrs_DioBuf[7]>>5) & 1);
      VAR_SET($DIO62, (gmrs_DioBuf[7]>>6) & 1);
      VAR_SET($DIO63, (gmrs_DioBuf[7]>>7) & 1);
   }
}

END_FUNCTION_BLOCK();
