BEGIN_FUNCTION_BLOCK();

const int HI_WORD_FIRST  = 0; // 1 = high-word first, 0 = low-word first

char  v_di = 0;
char  v_do = 0;
WORD  v_ai[6]; 
int   gWriteCount = 0;

// Write DO
if (VAR_VALUE($ENABLE_DO) && VAR_VALUE($W_ACTION)) 
{
   int iWrite = 0;
   v_do   = 0;
    
   iWrite += VAR_GET_WRITE_BYTE(&v_do, $DO0, 0);
   iWrite += VAR_GET_WRITE_BYTE(&v_do, $DO1, 1);
   iWrite += VAR_GET_WRITE_BYTE(&v_do, $DO2, 2);

   if ( iWrite )  // Write only when need
   {
      gWriteCount++;
      if ( ! MTM_WRITEDO($DEVICE, $NETID, 20, 3, &v_do, $TIMEOUT) )
         return HMI_ERROR;  
   }
}

if ( gWriteCount ) return HMI_OK;  // Skip reading to reduce the device loading 

if (VAR_VALUE($ENABLE_DO) && VAR_VALUE($R_ACTION)) { 
   if (MTM_READDO($DEVICE, $NETID, 20, 3, &v_do, $TIMEOUT) ) 
   {
      VAR_SET($DO0, (v_do>>0) & 1);
      VAR_SET($DO1, (v_do>>1) & 1);
      VAR_SET($DO2, (v_do>>2) & 1);
   } else
      return HMI_ERROR;  
}

// Read DI ********************
if (VAR_VALUE($ENABLE_DI) && VAR_VALUE($R_ACTION)) { 
   if (MTM_READDI($DEVICE, $NETID, 20, 6, &v_di, $TIMEOUT)) 
   {  
      VAR_SET($DI0, (v_di>>0) & 1);
      VAR_SET($DI1, (v_di>>1) & 1);
      VAR_SET($DI2, (v_di>>2) & 1);
      VAR_SET($DI3, (v_di>>3) & 1);
      VAR_SET($DI4, (v_di>>4) & 1);
      VAR_SET($DI5, (v_di>>5) & 1);
   } else
      return HMI_ERROR;
}

if (VAR_VALUE($ENABLE_AI) &&VAR_VALUE($R_ACTION)) 
{
   DWORD dwHex[3];
      
   float *fv  = (float*) &dwHex[0];  // Sharing the same address for DWORD & float
   float *fv1 = (float*) &dwHex[1];
   float *fv2 = (float*) &dwHex[2];   
   
   // get floating data @ 0x208
     
   if (MTM_READAI($DEVICE, $NETID, 20, 6, v_ai, $TIMEOUT) )  // handle, address, points, buffer 
   {
      if ( HI_WORD_FIRST )
      {
         for (int i = 0; i < 3; i++)
            dwHex[i] = (((DWORD) v_ai[i*2]) << 16) | v_ai[i*2+1];
      }
      else
      {
         for(int i = 0; i < 3; i++)
            dwHex[i] = (((DWORD) v_ai[i*2+1]) << 16) | v_ai[i*2];
      } 
   
      VAR_SET($AI0, (long)((*fv)  * 1000.0));  // Gain 1000 to keep 3 points decimal value
      VAR_SET($AI1, (long)((*fv1) * 1000.0) );
      VAR_SET($AI2, (long)((*fv2) * 1000.0) );
   } else
      return HMI_ERROR;  
}
   
END_FUNCTION_BLOCK();
